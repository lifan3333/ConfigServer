|---------------------------------------------------------------------------------------------------------
|该文件记录当前所要做的任务,并定期检查是否完成，标记相应的进度情况
|---------------------------------------------------------------------------------------------------------

1.现有代码里面的TODO list进行填补和完善(已经完成)

2.现有版本的BUG修复,每次修复一个BUG需要记录BUG的详细信息
   BUG描述 BUG产生的原因 BUG是否修复

3.系统尚未完成的辅助功能
  3.1 通信协议的序列化和反序列化,压缩解压功能 (已经完成)
  3.2 发布者调用取消发布配置信息时，如何唯一确定哪条记录需要删除
  3.3 client如何动态获取配置中心服务地址?
    a) 配置文件(定时监听和扫描配置文件的变化) (已经完成)
      1)当用户通过ConfigClientImpl指定了server address时则优先使用这些地址，否则使用指定的配置文件中的地址
      2)当server address没有指定时，检查配置文件是否存在，同时检查配置文件的内容是否合法；合法后启动定时线程
      扫描配置变化情况，一旦监听到配置文件有更改则将服务列表更新
  3.4 服务端加入本地cache
    a)Category服务加入本地cache功能(已完成)
  3.5 服务端添加最大连接数限制功能 (已完成)
  3.6 路由，动态配置信息与发布者消费者的信息需要区分，是否持久化存储(类似zookeeper的临时节点和永久节点)
  3.7 检查所有的线程池,线程是否设置了线程名称(已完成)
  3.8 检查所有的线程池是否正确配置了最大的任务队列数(已完成)
  3.9 定时统计所有的线程池任务数(已经提交的任务，当前正在活动的任务数量,总共提交的任务数,队列堆积数)(已完成)
  3.10 事件消息和变更消息模块拆分(已完成)
  3.11 数据库主从配置以及连接超时，读取数据超时参数配置
  3.12 client与server的负载均衡(四层负载均衡)
  3.13 优化RemotingUtil.closeChannel调用关系
    a) ConfigServer与Client之间只需要维持一条长连接，因此在对待连接是否关闭的问题上，需要细化。
      1.正常的序列化/反序列化失败了，不需要关闭该连接；只需要对上抛出异常；
      2.一次请求调用超时，不需要立刻关闭连接(连续调用n次都超时，则需要是否是该连接对应的远端服务出现了问题)
      3.服务端处理客户端的请求时，服务端内部处理逻辑异常，不需要关闭该连接
      4.在一段时间内，该连接持续出现某些错误(超时,心跳汇报失败)时，需要考虑将该连接关闭
  3.14 配置中心处在服务提供者，服务调用者调用路径之外，它是一个旁路组件；需要考虑以下两种场景的处理情况
    a) 单台配置中心的负载过高，导致服务提供者与配置中心间的心跳不能及时处理，配置中心认为该心跳超时，从而将其发布的所有配置项删除，并推送变更通知
    b) 由于配置中心是服务提供者和调用者的旁路，因此会存在这样的问题:服务调用者与服务提供者之间的网络正常，而服务提供者与配置中心的
    网络不正常；在这种情形下，配置中心会将服务提供者发布的所有配置项删除

  3.15 数据库容灾
   a) 当数据库宕机时，需要保证系统能够提供正常的调用者扩容或者缩容操作
      将配置数据缓存在每台服务的内存里面

4.单元测试,功能测试代码编写
  4.1 通过测试用例发现系统潜在问题
  4.2 提高系统的单元测试覆盖率
  4.3 性能压测(推送延迟测试,压缩比例压缩耗时)
    a)性能测试(检查系统是否能到达预期的性能指标)
    b)压力测试
    c)负载测试
    d)性能指标数据（TPS Response time, push delay,JVM STW time,frequency）

5.ConfigServer系统整体设计Review和功能Review
  5,1 数据库表设计合理性检查
    a)config_change_log表的path字段需要增加唯一性检查，避免插入了重复的path
    b)config_category的<cell,resource,type>需要进行唯一性检查,避免插入了相同的cell resource type
    c)

6.ConfigServer与Dubbo集成
  6.1 完成dubbo-registry-configserver模块代码开发(已经完成)
  6.2 实现dubbo-demo工程正确运行(已经完成)
    a)provider将配置信息注册到config server
    b)consumer从config server获取配置
    c)provider-consumer正确通信
  6.3 dubbo-admin工程改造
   a) 完成dubbo-admin订阅root根目录的功能，正确的推送root的resource变更(已经完成)
  6.4 dubbo已经迁移到github上(已经完成)
    a)基于alibaba/dubbo 2.5.4
  6.5 dubbo-admin工程熟悉和掌握
  
7.configserver-web工程功能规划和代码开发